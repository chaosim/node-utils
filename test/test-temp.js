// Generated by CoffeeScript 1.6.2
(function() {
  var xexports,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  xexports = {};

  xexports.UtilsTest = {
    test: function(test) {
      var a;

      a = {};
      a[{}] = true;
      test.ok(a.hasOwnProperty({
        a: 1
      }));
      test.strictEqual({
        a: 1
      }.toString(), {}.toString());
      return test.done();
    },
    test2: function(test) {
      var a, b, d;

      a = {};
      a.toString = function() {
        return 'a';
      };
      b = {};
      b.toString = function() {
        return 'b';
      };
      d = {};
      d[a] = 1;
      test.ok(!d.hasOwnProperty(b));
      return test.done();
    },
    test3: function(test) {
      var A, a;

      A = (function() {
        function A() {}

        A.name = 'A';

        A.prototype.instanceName = 'instace_Of_A';

        return A;

      })();
      a = new A();
      test.strictEqual(a.constructor.name, 'A');
      test.strictEqual(A.name, 'A');
      test.strictEqual(a.name, void 0);
      test.strictEqual(a.instanceName, 'instace_Of_A');
      test.ok(A.instanceName == null);
      return test.done();
    },
    test4: function(test) {
      var A, B, b, _ref;

      A = (function() {
        function A() {}

        A.name1 = 'A';

        A.prototype.instanceName = 'instace_Of_A';

        return A;

      })();
      B = (function(_super) {
        __extends(B, _super);

        function B() {
          _ref = B.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        return B;

      })(A);
      b = new B();
      test.strictEqual(b.constructor.name, 'B');
      test.strictEqual(b.constructor.name1, 'A');
      test.strictEqual(b.instanceName, 'instace_Of_A');
      return test.done();
    },
    test5: function(test) {
      var a;

      a = {};
      a.A = (function() {
        function A() {}

        return A;

      })();
      test.equal(a.A.name, 'A');
      return test.done();
    },
    test: function(test) {
      var a, b;

      a = {};
      a.toString = function() {
        return 'dasf';
      };
      b = {
        a: a
      };
      b.toString = function() {
        return this.a.toString();
      };
      test.strictEqual("" + b, 'dasf');
      return test.done();
    },
    test: function(test) {
      var dict, x;

      dict = require("../src/utils").dict;
      x = dict([1, 2], 1, [3, 4], 2);
      test.equal(x([1, 2]), 1);
      test.equal(x([3, 4]), 1);
      return test.done();
    }
  };

  exports.UtilsTest = {
    test: function(test) {
      var A;

      A = (function() {
        function A() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          this.args = args;
        }

        (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(A, [1, 2], function(){});

        return A;

      })();
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test-temp.map
*/
